function createCountdownTimer(initialTime) {
    let time = initialTime;
    let timerId = null;
    let isRunning = false;
    const callbacks = {
        tick: [],
        complete: [],
        pause: [],
        reset: []
    };

    function executeCallbacks(type, data = null) {
        if (callbacks[type]) {
            callbacks[type].forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –≤ callback:', error);
                }
            });
        }
    }

    function tick() {
        if (time > 0) {
            time--;
            executeCallbacks('tick', time);
            
            if (time === 0) {
                stop();
                executeCallbacks('complete');
            }
        }
    }

    function stop() {
        if (timerId) {
            clearInterval(timerId);
            timerId = null;
            isRunning = false;
        }
    }

    return {
        start: function() {
            if (!isRunning && time > 0) {
                isRunning = true;
                timerId = setInterval(tick, 1000);
            }
            return this;
        },
        
        pause: function() {
            if (isRunning) {
                stop();
                executeCallbacks('pause', time);
            }
            return this;
        },
        
        reset: function() {
            stop();
            time = initialTime;
            executeCallbacks('reset', time);
            return this;
        },
        
        setTime: function(newTime) {
            stop();
            time = newTime;
            initialTime = newTime;
            return this;
        },
        
        getTime: function() {
            return time;
        },
        
        isRunning: function() {
            return isRunning;
        },
        
        onTick: function(callback) {
            callbacks.tick.push(callback);
            return this;
        },
        
        onComplete: function(callback) {
            callbacks.complete.push(callback);
            return this;
        },
        
        onPause: function(callback) {
            callbacks.pause.push(callback);
            return this;
        },
        
        onReset: function(callback) {
            callbacks.reset.push(callback);
            return this;
        }
    };
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
console.log("–°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 5 —Å–µ–∫—É–Ω–¥:");
const timer = createCountdownTimer(5);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
timer.onTick((time) => {
    console.log(`‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: ${time} —Å–µ–∫`);
});

timer.onComplete(() => {
    console.log('üéâ –í—Ä–µ–º—è –≤—ã—à–ª–æ!');
});

timer.onPause((time) => {
    console.log(`‚è∏Ô∏è –¢–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ –Ω–∞ ${time} —Å–µ–∫`);
});

timer.onReset((time) => {
    console.log(`üîÑ –¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω –¥–æ ${time} —Å–µ–∫`);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
console.log("–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä:");
timer.start();

// –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É
setTimeout(() => {
    console.log("–°—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É:");
    timer.pause();
    
    // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    setTimeout(() => {
        console.log("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º:");
        timer.start();
    }, 2000);
}, 2000);

// –ß–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
setTimeout(() => {
    console.log("–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä:");
    timer.reset();
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    setTimeout(() => {
        console.log("–ù–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã:");
        timer.setTime(3).start();
    }, 1000);
}, 8000);
