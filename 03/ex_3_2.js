class AsyncGeneratorUtils {
    /**
     * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –æ–¥–∏–Ω
     */
    static async *merge(...generators) {
        const promises = generators.map(async function* (gen) {
            for await (const value of gen) {
                yield { source: gen, value };
            }
        }());
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        const nextPromises = promises.map(async (iterator, index) => ({
            index,
            value: await iterator.next()
        }));
        
        while (nextPromises.length > 0) {
            const { index, value } = await Promise.race(nextPromises);
            
            if (value.done) {
                nextPromises.splice(index, 1);
            } else {
                yield value.value;
                nextPromises[index] = promises[index].next().then(value => ({ index, value }));
            }
        }
    }
    
    /**
     * –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è merge –¥–ª—è —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª–µ–π
     */
    static async *mergeSimple(...generators) {
        let activeGenerators = generators.map(async function* (gen, index) {
            for await (const value of gen) {
                yield { source: index, value };
            }
        }());
        
        while (activeGenerators.length > 0) {
            for (let i = 0; i < activeGenerators.length; i++) {
                try {
                    const result = await activeGenerators[i].next();
                    if (!result.done) {
                        yield result.value;
                    } else {
                        activeGenerators.splice(i, 1);
                        i--;
                    }
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ ${i}:`, error);
                    activeGenerators.splice(i, 1);
                    i--;
                }
            }
        }
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
     */
    static async *filter(generator, predicate) {
        for await (const value of generator) {
            if (await predicate(value)) {
                yield value;
            }
        }
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
     */
    static async *map(generator, transform) {
        for await (const value of generator) {
            yield await transform(value);
        }
    }
    
    /**
     * –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    static async *withTimeout(generator, timeoutMs) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
            controller.abort();
        }, timeoutMs);
        
        try {
            for await (const value of generator) {
                if (controller.signal.aborted) {
                    throw new Error('Generator timeout');
                }
                yield value;
            }
        } catch (error) {
            if (error.message === 'Generator timeout') {
                console.log(`‚è∞ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (${timeoutMs}ms)`);
                yield { error: 'timeout', message: `Timeout after ${timeoutMs}ms` };
            } else {
                throw error;
            }
        } finally {
            clearTimeout(timeoutId);
        }
    }
    
    /**
     * –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
     */
    static async *take(generator, limit) {
        let count = 0;
        for await (const value of generator) {
            if (count >= limit) break;
            yield value;
            count++;
        }
    }
    
    /**
     * –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –º–∞—Å—Å–∏–≤
     */
    static async collect(generator) {
        const results = [];
        for await (const value of generator) {
            results.push(value);
        }
        return results;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
     */
    static async *fromArray(array, delayMs = 0) {
        for (const item of array) {
            if (delayMs > 0) {
                await new Promise(resolve => setTimeout(resolve, delayMs));
            }
            yield item;
        }
    }
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
const demonstrateComposition = async () => {
    console.log("üé® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤:");
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    const numberGenerator = AsyncGeneratorUtils.fromArray(
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 
        200
    );
    
    const stringGenerator = AsyncGeneratorUtils.fromArray(
        ['a', 'b', 'c', 'd', 'e'], 
        300
    );
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã
    const mergedGenerator = AsyncGeneratorUtils.mergeSimple(
        numberGenerator,
        stringGenerator
    );
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    const processedGenerator = AsyncGeneratorUtils.map(
        AsyncGeneratorUtils.filter(
            mergedGenerator,
            async (item) => {
                if (typeof item.value === 'number') {
                    return item.value % 2 === 0; // –¢–æ–ª—å–∫–æ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
                }
                return true; // –í—Å–µ —Å—Ç—Ä–æ–∫–∏
            }
        ),
        async (item) => {
            if (typeof item.value === 'number') {
                return `–ß–∏—Å–ª–æ: ${item.value * 10}`;
            }
            return `–°—Ç—Ä–æ–∫–∞: ${item.value.toUpperCase()}`;
        }
    );
    
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const limitedGenerator = AsyncGeneratorUtils.take(processedGenerator, 8);
    
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:");
    for await (const value of limitedGenerator) {
        console.log(`üì¶ ${value}`);
    }
};

// demonstrateComposition();

// –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
const practicalExample = async () => {
    console.log("üè≠ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö API");
    
    // –ò–º–∏—Ç–∞—Ü–∏—è API –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
    const userGenerator = AsyncGeneratorUtils.fromArray(
        ['user1', 'user2', 'user3', 'user4'], 
        400
    );
    
    const orderGenerator = AsyncGeneratorUtils.fromArray(
        ['orderA', 'orderB', 'orderC'], 
        500
    );
    
    const notificationGenerator = AsyncGeneratorUtils.fromArray(
        ['notifX', 'notifY', 'notifZ'], 
        350
    );
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const allDataStream = AsyncGeneratorUtils.mergeSimple(
        AsyncGeneratorUtils.map(userGenerator, async user => ({ type: 'user', data: user })),
        AsyncGeneratorUtils.map(orderGenerator, async order => ({ type: 'order', data: order })),
        AsyncGeneratorUtils.map(notificationGenerator, async notif => ({ type: 'notification', data: notif }))
    );
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const processedStream = AsyncGeneratorUtils.withTimeout(allDataStream, 5000);
    
    try {
        for await (const item of processedStream) {
            console.log(`üìä ${item.type}: ${item.data}`);
        }
    } catch (error) {
        console.log('–ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω:', error.message);
    }
};

// practicalExample();