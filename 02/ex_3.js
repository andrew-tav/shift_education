async function* createPaginatedAPIGenerator(baseURL, pageSize = 10) {
    let currentPage = 1;
    let hasMore = true;
    let totalProcessed = 0;
    
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: ${baseURL}, —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${pageSize}`);
    
    while (hasMore) {
        console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${currentPage}...`);
        
        try {
            // –ò–º–∏—Ç–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
            const response = await mockAPI.fetchPage(currentPage, pageSize);
            
            if (!response.data || response.data.length === 0) {
                console.log('‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º.');
                break;
            }
            
            // Yield'–∏–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for (const item of response.data) {
                totalProcessed++;
                yield {
                    item: item,
                    page: currentPage,
                    totalProcessed: totalProcessed,
                    isLastPage: !response.hasMore
                };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ
            hasMore = response.hasMore;
            currentPage++;
            
            if (!hasMore) {
                console.log(`‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${totalProcessed}`);
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage}:`, error.message);
            yield {
                error: `–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage}: ${error.message}`,
                page: currentPage
            };
            break;
        }
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
async function* createAdvancedPaginatedGenerator({
    baseURL,
    pageSize = 10,
    maxPages = 100,
    delayBetweenPages = 200
}) {
    let currentPage = 1;
    let hasMore = true;
    let totalYielded = 0;
    
    while (hasMore && currentPage <= maxPages) {
        console.log(`üì• –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}...`);
        
        await new Promise(resolve => setTimeout(resolve, delayBetweenPages));
        
        try {
            const response = await mockAPI.fetchPage(currentPage, pageSize);
            
            if (!response.data || response.data.length === 0) {
                console.log('üèÅ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º.');
                break;
            }
            
            // Yield'–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for (const item of response.data) {
                totalYielded++;
                yield {
                    data: item,
                    metadata: {
                        page: currentPage,
                        itemIndex: totalYielded,
                        totalPages: Math.ceil(response.total / pageSize),
                        isLastItem: totalYielded === response.total
                    }
                };
            }
            
            hasMore = response.hasMore;
            currentPage++;
            
        } catch (error) {
            console.error(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
            yield { 
                error: true, 
                message: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}: ${error.message}`,
                fatal: true 
            };
            break;
        }
    }
    
    console.log(`üéâ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${currentPage - 1}, —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${totalYielded}`);
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º
const testPagination = async () => {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é API:");
    
    const generator = createPaginatedAPIGenerator('https://api.example.com/data', 5);
    
    for await (const result of generator) {
        if (result.error) {
            console.log(`‚ö†Ô∏è ${result.error}`);
        } else {
            console.log(`üì¶ ${result.item} (—Å—Ç—Ä. ${result.page}, –≤—Å–µ–≥–æ: ${result.totalProcessed})`);
        }
    }
};

// testPagination();
