async function* createRobustGenerator(dataArray, delay = 500) {
    for (const item of dataArray) {
        await new Promise(resolve => setTimeout(resolve, delay));
        
        try {
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
            if (item === null || item === undefined) {
                throw new Error(`–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${item}`);
            }
            
            if (item === 'error') {
                throw new Error('–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            }
            
            yield { success: true, data: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${item}` };
            
        } catch (error) {
            yield { success: false, error: error.message };
        }
    }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function* createRobustGeneratorWithLogging(dataArray, delay = 500) {
    let index = 0;
    
    for (const item of dataArray) {
        console.log(`üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç ${index + 1}/${dataArray.length}`);
        
        await new Promise(resolve => setTimeout(resolve, delay));
        
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if (item == null) {
                throw new Error('–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –∏–ª–∏ undefined');
            }
            
            if (typeof item === 'string' && item.toLowerCase() === 'error') {
                throw new Error('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞');
            }
            
            // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            const processed = `üéØ ${item.toUpperCase()}_PROCESSED`;
            yield { 
                success: true, 
                data: processed,
                index: index,
                timestamp: new Date().toISOString()
            };
            
        } catch (error) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ ${index}:`, error.message);
            yield { 
                success: false, 
                error: error.message,
                index: index,
                timestamp: new Date().toISOString()
            };
        }
        
        index++;
    }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º
const testErrorHandling = async () => {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫:");
    
    const testData = ['apple', null, 'banana', 'error', 'cherry'];
    const generator = createRobustGeneratorWithLogging(testData, 800);
    
    let successCount = 0;
    let errorCount = 0;
    
    for await (const result of generator) {
        if (result.success) {
            successCount++;
            console.log(`‚úÖ –£—Å–ø–µ—Ö: ${result.data}`);
        } else {
            errorCount++;
            console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
        }
    }
    
    console.log(`\nüìä –ò—Ç–æ–≥–∏: –£—Å–ø–µ—Ö–æ–≤: ${successCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
};

// testErrorHandling();
