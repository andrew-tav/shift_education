async function* createNumberGenerator(limit, delay = 1000) {
    for (let i = 1; i <= limit; i++) {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        await new Promise(resolve => setTimeout(resolve, delay));
        yield i;
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é
async function* createNumberGeneratorAdvanced(limit, delay = 1000) {
    let current = 1;
    
    while (current <= limit) {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        const promise = new Promise(resolve => {
            setTimeout(() => {
                resolve(current);
            }, delay);
        });
        
        // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–∞ –∏ yield'–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const result = await promise;
        yield result;
        current++;
    }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º
const testGenerator = async () => {
    console.log("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:");
    const generator = createNumberGenerator(3, 1000);
    
    for await (const number of generator) {
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ —á–∏—Å–ª–æ: ${number}`);
    }
    
    console.log("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!");
};

// testGenerator();
