async function* createFileStreamGenerator(filePath, chunkSize = 1024) {
    console.log(`üìÅ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${filePath}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: ${chunkSize} –±–∞–π—Ç`);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        const fileSize = await mockFileSystem.getFileSize(filePath);
        console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileSize} –±–∞–π—Ç`);
        
        let offset = 0;
        let chunkNumber = 1;
        const totalChunks = Math.ceil(fileSize / chunkSize);
        
        while (offset < fileSize) {
            const currentChunkSize = Math.min(chunkSize, fileSize - offset);
            
            console.log(`üìñ –ß–∏—Ç–∞–µ–º —á–∞–Ω–∫ ${chunkNumber}/${totalChunks} (—Å–º–µ—â–µ–Ω–∏–µ: ${offset}, —Ä–∞–∑–º–µ—Ä: ${currentChunkSize})`);
            
            // –ß–∏—Ç–∞–µ–º —á–∞–Ω–∫ —Ñ–∞–π–ª–∞
            const chunk = await mockFileSystem.readFileChunk(filePath, offset, currentChunkSize);
            
            yield {
                chunk: chunk,
                chunkNumber: chunkNumber,
                offset: offset,
                size: currentChunkSize,
                progress: ((offset + currentChunkSize) / fileSize * 100).toFixed(1),
                isLast: offset + currentChunkSize >= fileSize
            };
            
            offset += currentChunkSize;
            chunkNumber++;
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
            await new Promise(resolve => setTimeout(resolve, 50));
        }
        
        console.log(`‚úÖ –§–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—á–∏—Ç–∞–Ω. –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: ${chunkNumber - 1}`);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
        yield { 
            error: true, 
            message: `–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞: ${error.message}` 
        };
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
async function* createUniversalStreamGenerator(source, options = {}) {
    const {
        chunkSize = 1024,
        encoding = 'utf-8',
        onProgress = null
    } = options;
    
    console.log(`üéØ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∏–º –¥–ª—è: ${source.type || 'unknown'}`);
    
    let processedBytes = 0;
    let chunkIndex = 1;
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if (source.type === 'file') {
        const fileSize = await mockFileSystem.getFileSize(source.path);
        
        while (processedBytes < fileSize) {
            const chunk = await mockFileSystem.readFileChunk(
                source.path, 
                processedBytes, 
                chunkSize
            );
            
            const result = {
                type: 'chunk',
                data: chunk,
                metadata: {
                    index: chunkIndex,
                    offset: processedBytes,
                    size: chunk.length,
                    total: fileSize,
                    progress: (processedBytes / fileSize * 100).toFixed(1)
                }
            };
            
            // –í—ã–∑—ã–≤–∞–µ–º callback –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            if (onProgress) {
                onProgress(result.metadata);
            }
            
            yield result;
            
            processedBytes += chunk.length;
            chunkIndex++;
            await new Promise(resolve => setTimeout(resolve, 30));
        }
        
    } else if (source.type === 'array') {
        // –°—Ç—Ä–∏–º–∏–Ω–≥ –∏–∑ –º–∞—Å—Å–∏–≤–∞
        const items = source.data;
        const totalItems = items.length;
        
        for (let i = 0; i < items.length; i += chunkSize) {
            const chunk = items.slice(i, i + chunkSize);
            
            yield {
                type: 'array_chunk',
                data: chunk,
                metadata: {
                    chunkIndex: chunkIndex,
                    startIndex: i,
                    endIndex: i + chunk.length,
                    totalItems: totalItems,
                    progress: ((i + chunk.length) / totalItems * 100).toFixed(1)
                }
            };
            
            chunkIndex++;
            await new Promise(resolve => setTimeout(resolve, 20));
        }
    }
    
    yield { type: 'complete', message: 'Stream finished successfully' };
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º
const testFileStream = async () => {
    console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤:");
    
    const fileStream = createFileStreamGenerator('/path/to/large/file.txt', 512);
    
    for await (const chunk of fileStream) {
        if (chunk.error) {
            console.log(`üí• ${chunk.message}`);
            break;
        }
        
        console.log(`üì¶ –ß–∞–Ω–∫ ${chunk.chunkNumber}: ${chunk.chunk.length} –±–∞–π—Ç (${chunk.progress}%)`);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —á–∞–Ω–∫
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ —Å–µ—Ç–∏, –ø–∞—Ä—Å–∏—Ç—å –∏ —Ç.–¥.
    }
};

// testFileStream();
